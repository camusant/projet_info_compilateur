/**
 * @file superlex.c
 * @author Antoine CAMUS
 * @brief édition d'une nouvelle fonction getNextToken et tests
 * @date 01/10/2018 3:20 am
 * 
 */

#define _POSIX_C_SOURCE 200112L
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <strings.h>

#include "global.h"
#include "notify.h"
#include "lex.h"

int main(void){
  int S=INIT;
  char * test="#Newbie\n";
  char * test2="Toto:  ADD $1, $2";
  char * test3=".sh  JAP 5,6";   /*cas vec virgule sans espace*/
  lex_read_line( test, 0);
  lex_read_line( test2, 1);
  lex_read_line( test3, 2);
  return EXIT_SUCCESS;
}
/**
 * @param token The pointeur to the lexeme to be extracted.
 * @param current_line The address from which the analysis must be performed.
 * @return the address at which the analysis stopped or NULL if the analysis is terminated.  
 * @brief This function get an input line, extracts a token from it and return the pointeur to the next place where the analysis should continue. 
 */

char* newGetNextToken(char** token, char* current_line)
{
    char* start = current_line; 
    char* end=NULL; 
    int token_size=0;
    int retourEtat;

    //Contrôles des commentaires

    if (start[0]=='#')
    {
        printf("[COMMENT   ]");
        puts(current_line);
	return NULL;
    }
      
    /* check input parameter*/ 
    if (current_line ==NULL) return NULL;
    
    
    /* eats any blanks before the token*/
    while ( *start!='\0' && ( isblank(*start) || *start==',' || *start=='"') ){
	start++;
    }

    /*Je comptabilise les guillemets comme erreur*/
    if(*start=='"'){
      printf("[GUILLEMET\t]\t");
      puts(start);
      return NULL;
    }
    
    /* go till next blank or end*/ 
    end=start; 
    
    while (  *end!='\0' && !isblank(*end) && *end!=',' && *end!='"' ){
	end++; 
    }
    /*compute size : if zero there is no more token to extract*/
    printf("start:");
    puts( start);
    printf("end:");
    puts( end);
    
    token_size=end-start;
    if (token_size>0){
	*token 	= calloc(token_size+1,sizeof(*start));
	strncpy(*token,start,token_size);
	(*token)[token_size]='\0';
	retourEtat = machine_etat(*token);
	return end;
    } 
    return NULL;
}  

/**
 * fonction machine_etat
 * @param text, de type char *, la chaine de caractère, lu caractère par caractère pour déterminer son type
 * @param etat, entier qui indique l'etat de la machine dans la fonction.
 * @return 1 if true ou fin de la chaine analysee, 0 en cas d'erreur ou de mauvais caractère.
 * @brief Cette fonction permat de lire une chaine de caractères, caractère par caractère, pour déterminer son type
 * @results
 */

int  machine_etat( char * text){
  int c='a';
  int i=0;
  int etat=INIT; /*Le numéro de l'etat indique la position de la constante d'état utilisé dans l'enum de lex.h*/
  while(c!='\0'){/*Pas encore arrive, au bout de texte*/
    printf("etat= %d\n",etat);
    c = text[i]; /*Caractere lu*/
    switch( etat)
    {
    case INIT: /*Demerrage*/
      if ( isdigit ( c )) {  /* isdigit : c est un digit*/ 
	if (c=='0'){
	  etat = DECIMAL_ZERO;/*c different de 0*/
        }
        else etat=DECIMAL;
      }
      else if( islower(c) ) etat=LETTRE_MIN; /*c est une lettre minuscule*/
      else if( isupper(c) ) etat=LETTRE_MAJ; /*c est une lettre majuscule*/
      else if( c=='_' || c=='-') etat=SYMBOLE;
      else if( c=='$' ) etat=REGISTRE;
      else if( c!='.' && ispunct(c) ){
	printf("[PONCTUATION \t]\t");
	puts(text);
	printf("\n");
	return 1;
      }
      else if( c=='.') etat=POINT; 
      else if(c=='\0'){
        printf("fin du texte des le debut\n");
        puts(text);
	printf("\n");
	return 1; /*c est la fin de text*/
      }
      else{  /*erreur de lecture*/
        printf("erreur de caractere\n");
	return 0;
      }
      break;
	 
    case DECIMAL_ZERO:
      if (c=='x' || c=='X') etat= DEBUT_HEXA; /*debut d un hexa*/
      else if( isdigit(c) ) etat= DECIMAL;
      else if(c=='\0'){
	printf("[DECIMAL \t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;
      
    case DEBUT_HEXA:
      if( isxdigit(c) ) etat=HEXA;
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case HEXA:
      if( isxdigit(c) ) etat=HEXA;
      else if(c=='\0'){
	printf("[HEXA \t]\t%s\n ",text);
        puts(text);	
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;
      
    case DECIMAL:
      if( isdigit(c) ) etat=DECIMAL;
      else if(c=='\0'){
	printf("[DECIMAL \t]\t%s\n ",text);
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case LETTRE_MIN:
      if( isalnum(c) ) etat=SYMBOLE; /*Début d'une etiquette*/
      else if(c=='\0'){
	printf("[SYMBOLE\t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case LETTRE_MAJ:
      if( isupper(c) ) etat=MNEMO; /*Début d'une mnémonique*/
      else if( isalnum(c) && !( isupper( c ) ) ) etat=SYMBOLE;
      else if(c=='\0'){
	printf("[MNEMO\t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case MNEMO:
     if( isupper(c) ) etat=MNEMO;/*Début d'une mnémonique*/
     else if( isalnum(c) && !( isupper( c ) ) ) etat=SYMBOLE;
     else if(c=='\0'){
	printf("[MNEMO\t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case SYMBOLE :
      if( isalnum(c) ) etat=SYMBOLE;/*Début d'une mnémonique*/
      else if(c=='\0'){
	printf("[SYMBOLE\t]\t");
	puts(text);
	return 1;
      }
      else if(c==':') etat= ETIQUETTE;
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case ETIQUETTE:
      if(c=='\0'){
	printf("[ETIQUETTE\t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case REGISTRE:
      if( isalnum(c) ) etat= REGISTRE;
      else if(c=='\0'){
	printf("[REGISTRE\t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;

    case POINT:
      if( isalpha(c) ) etat= DIRECTIVE;
      else if(c=='\0'){
	printf("[PONCTUATION\t]\t");
        puts(text);	
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break;
      
    case DIRECTIVE:
     if( isalpha(c) ) etat= DIRECTIVE;
      else if(c=='\0'){
	printf("[DIRECTIVE\t]\t");
	puts(text);
	return 1;
      }
      else{
        printf("erreur de caractere\n");
        return 0;
      }
      break; 
      
      
    default:
      printf("erreur de caractere\n");
      return 0;
    }
    i++;
  }
  return 1; 
    
}

/**
 * @param line String of the line of source code to be analysed.
 * @param nline the line number in the source code.
 * @return should return the collection of lexemes that represent the input line of source code.
 * @brief This function performs lexical analysis of one standardized line.
 *
 */
void lex_read_line( char *line, int nline) {
    char* token = NULL;
    char* current_address=line;


    /* TODO : faire l'analyse lexical de chaque token ici et les ajouter dans une collection*/
    while( (current_address= newGetNextToken(&token, current_address)) != NULL){ 

        puts(token);
	free(token);
    }

    return;
}
